package hcl

import (
	"fmt"

	hclv2 "github.com/hashicorp/hcl/v2"
	"github.com/hashicorp/hcl/v2/hclwrite"
	"github.com/zclconf/go-cty/cty"
	"github.com/zclconf/go-cty/cty/gocty"
)

type Body struct {
	*hclwrite.Body
	file *hclwrite.File
}

type Block struct {
	*hclwrite.Block
}

func NewBody(version string) *Body {
	f := hclwrite.NewEmptyFile()
	body := f.Body()
	body.AppendUnstructuredTokens(hclwrite.TokensForTraversal(hclv2.Traversal{
		hclv2.TraverseRoot{
			Name: "# This file was generated by observgen " + version,
		},
	}))
	body.AppendNewline()
	body.AppendNewline()

	return &Body{body, f}
}

func (b *Body) WriteModule(m Module) error {
	block := b.AppendNewBlock("module", []string{m.Name})

	val, err := gocty.ToCtyValue(m.Source+"?ref="+m.Version, cty.String)
	if err != nil {
		return fmt.Errorf("error writing source variable for %s module: %v", m.Name, err)
	}

	block.Body().SetAttributeValue("source", val)
	for _, v := range m.Variables {
		block.Body().SetAttributeTraversal(v.Name, hclv2.Traversal{
			hclv2.TraverseRoot{
				Name: "var." + v.Name,
			},
		})
	}
	for _, v := range m.LocalVars {
		block.Body().SetAttributeTraversal(v.Name, hclv2.Traversal{
			hclv2.TraverseRoot{
				Name: v.Default.(string),
			},
		})
	}
	b.AppendNewline()

	return nil

}

func (b *Body) WriteVar(v *Variable) error {
	block := b.AppendNewBlock("variable", []string{v.Name})
	block.Body().SetAttributeTraversal("type", hclv2.Traversal{
		hclv2.TraverseRoot{
			Name: v.Type,
		},
	})

	t := GetCTYType(v.Type)
	val, err := gocty.ToCtyValue(v.Default, t)
	if err != nil {
		return fmt.Errorf("error writing var %s: %v", v.Name, err)
	}

	block.Body().SetAttributeValue("default", val)
	b.AppendNewline()
	return nil
}

func (b *Body) WriteLocalVars(vars []*Variable) error {
	block := b.AppendNewBlock("local", []string{})
	for _, v := range vars {
		block.Body().SetAttributeTraversal(v.Name, hclv2.Traversal{
			hclv2.TraverseRoot{
				Name: v.Default.(string),
			},
		})
	}
	return nil
}

func (b *Block) WriteProvider(v *Provider) error {
	b.Body().SetAttributeValue(v.Name, cty.ObjectVal(map[string]cty.Value{
		"source": cty.StringVal(v.Source),
	}))

	return nil
}

// Could probably remove. I'm sure the gocty library has a function that does this
func GetCTYType(v interface{}) cty.Type {
	switch v {
	case "number":
		return cty.Number
	case "bool":
		return cty.Bool
	case "string":
		return cty.String
	case "object":
		return cty.EmptyObject
	default:
		return cty.NilType
	}
}
